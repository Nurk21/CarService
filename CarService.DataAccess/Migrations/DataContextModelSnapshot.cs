// <auto-generated />
using CarService.DataAccess.DataBase;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CarService.DataAccess.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CarService.Core.Entities.DetailsType.Body", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte>("BodyCondition")
                        .HasColumnType("tinyint");

                    b.Property<double>("RepairPrice")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Bodies");
                });

            modelBuilder.Entity("CarService.Core.Entities.DetailsType.Brakes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte>("BrakesCondition")
                        .HasColumnType("tinyint");

                    b.Property<double>("RepairPrice")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Brakess");
                });

            modelBuilder.Entity("CarService.Core.Entities.DetailsType.Cabin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte>("CabinCondition")
                        .HasColumnType("tinyint");

                    b.Property<double>("RepairPrice")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Cabins");
                });

            modelBuilder.Entity("CarService.Core.Entities.DetailsType.Handrail", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<byte>("HandrailCondition")
                        .HasColumnType("tinyint");

                    b.Property<double>("RepairPrice")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Handrails");
                });

            modelBuilder.Entity("CarService.Core.Entities.DetailsType.Hydraulic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte>("HydraulicCondition")
                        .HasColumnType("tinyint");

                    b.Property<double>("RepairPrice")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Hydraulics");
                });

            modelBuilder.Entity("CarService.Core.Entities.DetailsType.Undercarriage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("RepairPrice")
                        .HasColumnType("float");

                    b.Property<byte>("UndercarriageCondition")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.ToTable("Undercarriages");
                });

            modelBuilder.Entity("CarService.Core.Entities.DetailsType.Wheel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BusId")
                        .HasColumnType("int");

                    b.Property<int>("CarId")
                        .HasColumnType("int");

                    b.Property<double>("RepairPrice")
                        .HasColumnType("float");

                    b.Property<int>("TruckId")
                        .HasColumnType("int");

                    b.Property<byte>("WheelCondition")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex("BusId");

                    b.HasIndex("CarId");

                    b.HasIndex("TruckId");

                    b.ToTable("Wheels");
                });

            modelBuilder.Entity("CarService.Core.Entities.VehicleType.Bus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BodyId")
                        .HasColumnType("int");

                    b.Property<int>("BrakesId")
                        .HasColumnType("int");

                    b.Property<int>("CabinId")
                        .HasColumnType("int");

                    b.Property<int>("UndercarriageId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BodyId")
                        .IsUnique();

                    b.HasIndex("BrakesId")
                        .IsUnique();

                    b.HasIndex("CabinId")
                        .IsUnique();

                    b.HasIndex("UndercarriageId")
                        .IsUnique();

                    b.ToTable("Buses");
                });

            modelBuilder.Entity("CarService.Core.Entities.VehicleType.Car", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BodyId")
                        .HasColumnType("int");

                    b.Property<int>("BrakesId")
                        .HasColumnType("int");

                    b.Property<int>("UndercarriageId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BodyId")
                        .IsUnique();

                    b.HasIndex("BrakesId")
                        .IsUnique();

                    b.HasIndex("UndercarriageId")
                        .IsUnique();

                    b.ToTable("Cars");
                });

            modelBuilder.Entity("CarService.Core.Entities.VehicleType.Truck", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("BodyId")
                        .HasColumnType("int");

                    b.Property<int>("BrakesId")
                        .HasColumnType("int");

                    b.Property<int>("HydraulicId")
                        .HasColumnType("int");

                    b.Property<int>("UndercarriageId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BodyId")
                        .IsUnique();

                    b.HasIndex("BrakesId")
                        .IsUnique();

                    b.HasIndex("UndercarriageId")
                        .IsUnique();

                    b.ToTable("Truckes");
                });

            modelBuilder.Entity("CarService.Core.Entities.DetailsType.Handrail", b =>
                {
                    b.HasOne("CarService.Core.Entities.VehicleType.Bus", "Bus")
                        .WithMany("Handrail")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CarService.Core.Entities.DetailsType.Wheel", b =>
                {
                    b.HasOne("CarService.Core.Entities.VehicleType.Bus", "Bus")
                        .WithMany("Wheels")
                        .HasForeignKey("BusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("CarService.Core.Entities.VehicleType.Car", "Car")
                        .WithMany("Wheels")
                        .HasForeignKey("CarId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("CarService.Core.Entities.VehicleType.Truck", "Truck")
                        .WithMany("Wheels")
                        .HasForeignKey("TruckId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("CarService.Core.Entities.VehicleType.Bus", b =>
                {
                    b.HasOne("CarService.Core.Entities.DetailsType.Body", "Body")
                        .WithOne("Bus")
                        .HasForeignKey("CarService.Core.Entities.VehicleType.Bus", "BodyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarService.Core.Entities.DetailsType.Brakes", "Brakes")
                        .WithOne("Bus")
                        .HasForeignKey("CarService.Core.Entities.VehicleType.Bus", "BrakesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarService.Core.Entities.DetailsType.Cabin", "Cabin")
                        .WithOne("Bus")
                        .HasForeignKey("CarService.Core.Entities.VehicleType.Bus", "CabinId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarService.Core.Entities.DetailsType.Undercarriage", "Undercarriage")
                        .WithOne("Bus")
                        .HasForeignKey("CarService.Core.Entities.VehicleType.Bus", "UndercarriageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CarService.Core.Entities.VehicleType.Car", b =>
                {
                    b.HasOne("CarService.Core.Entities.DetailsType.Body", "Body")
                        .WithOne("Car")
                        .HasForeignKey("CarService.Core.Entities.VehicleType.Car", "BodyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarService.Core.Entities.DetailsType.Brakes", "Brakes")
                        .WithOne("Car")
                        .HasForeignKey("CarService.Core.Entities.VehicleType.Car", "BrakesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarService.Core.Entities.DetailsType.Undercarriage", "Undercarriage")
                        .WithOne("Car")
                        .HasForeignKey("CarService.Core.Entities.VehicleType.Car", "UndercarriageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CarService.Core.Entities.VehicleType.Truck", b =>
                {
                    b.HasOne("CarService.Core.Entities.DetailsType.Body", "Body")
                        .WithOne("Truck")
                        .HasForeignKey("CarService.Core.Entities.VehicleType.Truck", "BodyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarService.Core.Entities.DetailsType.Brakes", "Brakes")
                        .WithOne("Truck")
                        .HasForeignKey("CarService.Core.Entities.VehicleType.Truck", "BrakesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarService.Core.Entities.DetailsType.Hydraulic", "Hydraulic")
                        .WithOne("Truck")
                        .HasForeignKey("CarService.Core.Entities.VehicleType.Truck", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarService.Core.Entities.DetailsType.Undercarriage", "Undercarriage")
                        .WithOne("Truck")
                        .HasForeignKey("CarService.Core.Entities.VehicleType.Truck", "UndercarriageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
